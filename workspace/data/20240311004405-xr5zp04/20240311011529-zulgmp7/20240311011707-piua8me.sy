{"ID":"20240311011707-piua8me","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f607","id":"20240311011707-piua8me","title":"编写简单的代码单元","updated":"20240311011723"},"Children":[{"ID":"20240311011723-fttors4","Type":"NodeParagraph","Properties":{"id":"20240311011723-fttors4","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"评价代码复杂度的一个常见方式是统计代码单元的路径数量。通常路径数量来自于："}]},{"ID":"20240311011723-0glbaoa","Type":"NodeList","ListData":{},"Properties":{"id":"20240311011723-0glbaoa","updated":"20240311011723"},"Children":[{"ID":"20240311011723-agoaz36","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311011723-agoaz36","updated":"20240311011723"},"Children":[{"ID":"20240311011723-fam0y4x","Type":"NodeParagraph","Properties":{"id":"20240311011723-fam0y4x","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"if"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20240311011723-ra8uk7o","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311011723-ra8uk7o","updated":"20240311011723"},"Children":[{"ID":"20240311011723-dbiyaz1","Type":"NodeParagraph","Properties":{"id":"20240311011723-dbiyaz1","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"case"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20240311011723-h1p76k3","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311011723-h1p76k3","updated":"20240311011723"},"Children":[{"ID":"20240311011723-3lmcdw1","Type":"NodeParagraph","Properties":{"id":"20240311011723-3lmcdw1","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"?"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20240311011723-zicuqvx","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311011723-zicuqvx","updated":"20240311011723"},"Children":[{"ID":"20240311011723-xwy3ag8","Type":"NodeParagraph","Properties":{"id":"20240311011723-xwy3ag8","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026amp;\u0026amp;"},{"Type":"NodeText","Data":"​, "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"||"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20240311011723-56578d3","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311011723-56578d3","updated":"20240311011723"},"Children":[{"ID":"20240311011723-hfct3qe","Type":"NodeParagraph","Properties":{"id":"20240311011723-hfct3qe","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"while"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"for"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20240311011723-4p8zh0p","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311011723-4p8zh0p","updated":"20240311011723"},"Children":[{"ID":"20240311011723-kps3dk2","Type":"NodeParagraph","Properties":{"id":"20240311011723-kps3dk2","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"catch"},{"Type":"NodeText","Data":"​"}]}]}]},{"ID":"20240311011723-ne6y2uj","Type":"NodeParagraph","Properties":{"id":"20240311011723-ne6y2uj","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"一些理论："}]},{"ID":"20240311011723-cgotjs9","Type":"NodeList","ListData":{},"Properties":{"id":"20240311011723-cgotjs9","updated":"20240311011723"},"Children":[{"ID":"20240311011723-u8w4er3","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311011723-u8w4er3","updated":"20240311011723"},"Children":[{"ID":"20240311011723-7082cnw","Type":"NodeParagraph","Properties":{"id":"20240311011723-7082cnw","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"分支覆盖率：一个代码分支点的数量，即覆盖代码所有分支点产生的分支路径的最小数量。"}]},{"ID":"20240311011723-gwb9y41","Type":"NodeList","ListData":{},"Properties":{"id":"20240311011723-gwb9y41","updated":"20240311011723"},"Children":[{"ID":"20240311011723-cv6kvf3","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311011723-cv6kvf3","updated":"20240311011723"},"Children":[{"ID":"20240311011723-n638eq8","Type":"NodeParagraph","Properties":{"id":"20240311011723-n638eq8","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"没有任何分支的代码分支覆盖率（分支点数量）为 0"}]}]},{"ID":"20240311011723-cmk10wa","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311011723-cmk10wa","updated":"20240311011723"},"Children":[{"ID":"20240311011723-wpfo4sy","Type":"NodeParagraph","Properties":{"id":"20240311011723-wpfo4sy","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"由于各分支之间可能进行排列组合，一个代码单元的分支点数量可以很大"}]}]}]}]},{"ID":"20240311011723-98bjphk","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311011723-98bjphk","updated":"20240311011723"},"Children":[{"ID":"20240311011723-cqa7caw","Type":"NodeParagraph","Properties":{"id":"20240311011723-cqa7caw","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"圈复杂度：又称循环复杂度、McCabe复杂度。对于只有一个退出点的代码，圈复杂度=分支点数量+1。"}]},{"ID":"20240311011723-u3scy35","Type":"NodeList","ListData":{},"Properties":{"id":"20240311011723-u3scy35","updated":"20240311011723"},"Children":[{"ID":"20240311011723-8mvbvty","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311011723-8mvbvty","updated":"20240311011723"},"Children":[{"ID":"20240311011723-ut7k1ci","Type":"NodeParagraph","Properties":{"id":"20240311011723-ut7k1ci","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"任何代码的圈复杂度至少为 1"}]}]}]}]},{"ID":"20240311011723-fzy7lhr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311011723-fzy7lhr","updated":"20240311011723"},"Children":[{"ID":"20240311011723-0whadqf","Type":"NodeParagraph","Properties":{"id":"20240311011723-0whadqf","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"需要覆盖代码单元所有独立执行路径的最少测试用例=分支点数量+1"}]}]}]},{"ID":"20240311011723-mkgqoan","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311011723-mkgqoan","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"原则"}]},{"ID":"20240311011723-nt51nqt","Type":"NodeList","ListData":{},"Properties":{"id":"20240311011723-nt51nqt","updated":"20240311011723"},"Children":[{"ID":"20240311011723-eh8fjzy","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311011723-eh8fjzy","updated":"20240311011723"},"Children":[{"ID":"20240311011723-oqu216t","Type":"NodeParagraph","Properties":{"id":"20240311011723-oqu216t","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"每个代码单元的分支点不超过 4 个"}]}]},{"ID":"20240311011723-1vg70oc","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311011723-1vg70oc","updated":"20240311011723"},"Children":[{"ID":"20240311011723-2tz9kwj","Type":"NodeParagraph","Properties":{"id":"20240311011723-2tz9kwj","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"将复杂的代码单元拆分成简单单元，避免同时包含多个复杂单元"}]}]}]},{"ID":"20240311011723-nb51dpg","Type":"NodeParagraph","Properties":{"id":"20240311011723-nb51dpg","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"原因：分支点越少，越易于理解和修改，同时方便测试"}]},{"ID":"20240311011723-8lrzjds","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311011723-8lrzjds","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"使用"}]},{"ID":"20240311011723-pfonvfo","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240311011723-pfonvfo","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"耦合性条件"}]},{"ID":"20240311011723-qr74dsx","Type":"NodeParagraph","Properties":{"id":"20240311011723-qr74dsx","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"大多数情况下，分支过多，尤其是需要进行逻辑判断的分支过多，大多是功能耦合性过大造成的。此时适合使用[[#提取方法]]的方法。"}]},{"ID":"20240311011723-deb0e6w","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240311011723-deb0e6w","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"简单条件语句"}]},{"ID":"20240311011723-whi2c76","Type":"NodeParagraph","Properties":{"id":"20240311011723-whi2c76","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"在一些情况下，分支只是来自于多个连续的简单 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"if-else-if"},{"Type":"NodeText","Data":"​ 链式调用或 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"switch-case"},{"Type":"NodeText","Data":"​。可以考虑使用引入 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Map"},{"Type":"NodeText","Data":"​ 结构简化分支"}]},{"ID":"20240311011723-grgn5l0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311011723-grgn5l0","updated":"20240311011723"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"List\u003cColor\u003e getFlagColors(Nationality nationality) {\n    List\u003cColor\u003e result;\n    switch (nationality) {\n        case DUTCH: \n            result = Arrays.asList(RED, WHITE, BLUE);\n            break;\n        case GERMAN: \n            result = Arrays.asList(BLACK, RED, YELLOW);\n            break;\n        case BELGIAN: \n            result = Arrays.asList(BLACK, YELLOW, RED);\n            break;\n        case FRENCH: \n            result = Arrays.asList(BLUE, WHITE, RED);\n            break;\n        // ...\n    }\n    return result;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311011723-dhst21a","Type":"NodeParagraph","Properties":{"id":"20240311011723-dhst21a","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"提取后结果为："}]},{"ID":"20240311011723-0854b23","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311011723-0854b23","updated":"20240311011723"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"static final Map\u003cNationality, List\u003cColor\u003e\u003e FLAGS = new HashMap\u003c\u003e();\n\nstatic {\n    FLAGS.put(DUTCH, Arrays.asList(RED, WHITE, BLUE));\n    FLAGS.put(GERMAN, Arrays.asList(BLACK, RED, YELLOW));\n    FLAGS.put(BELGIAN, Arrays.asList(BLACK, YELLOW, RED));\n    FLAGS.put(FRENCH, Arrays.asList(BLUE, WHITE, RED));\n    // ...\n}\n\nList\u003cColor\u003e getFlagColors(Nationality nationality) {\n    List\u003cColor\u003e colors = FLAGS.get(nationality);\n    return colors == null ? Arrays.asList(GRAY) : colors;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311011723-xf7crbm","Type":"NodeParagraph","Properties":{"id":"20240311011723-xf7crbm","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"也可以进一步引入接口以实现更高的可扩展性和自由度，但引入了更多的类和代码"}]},{"ID":"20240311011723-bagdvt3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311011723-bagdvt3","updated":"20240311011723"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"interface Flag {\n    List\u003cColor\u003e getColors();\n}\n\nclass DutchFlag implements Flag {\n    @Override\n    public List\u003cColor\u003e getColors() {\n        return Arrays.asList(RED, WHITE, BLUE);\n    }\n}\n\nstatic final Map\u003cNationality, Flag\u003e FLAGS = new HashMap\u003c\u003e();\n\nstatic {\n    FLAGS.put(DUTCH, new DutchFlag());\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311011723-dhy1703","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240311011723-dhy1703","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"嵌套条件语句"}]},{"ID":"20240311011723-hqdqjlw","Type":"NodeParagraph","Properties":{"id":"20240311011723-hqdqjlw","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"处理嵌套语句一般分两步"}]},{"ID":"20240311011723-tv354t3","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240311011723-tv354t3","updated":"20240311011723"},"Children":[{"ID":"20240311011723-frxokr2","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240311011723-frxokr2","updated":"20240311011723"},"Children":[{"ID":"20240311011723-o5nh3oj","Type":"NodeParagraph","Properties":{"id":"20240311011723-o5nh3oj","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"使用卫语句替代嵌套的条件语句，即将代码中的嵌套条件语句扁平化"}]}]},{"ID":"20240311011723-d55xp62","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240311011723-d55xp62","updated":"20240311011723"},"Children":[{"ID":"20240311011723-yoi0emu","Type":"NodeParagraph","Properties":{"id":"20240311011723-yoi0emu","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"将嵌套的条件语句提取到其他方法中（提取方法）"}]}]}]},{"ID":"20240311011723-7fty2gp","Type":"NodeParagraph","Properties":{"id":"20240311011723-7fty2gp","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"下面是一个递归查找树中某元素的深度的代码："}]},{"ID":"20240311011723-rv8iqab","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311011723-rv8iqab","updated":"20240311011723"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public static int calculateDepth(BinaryTreeNode t, int n) {\n    int depth = 0;\n\n    if (t.value() == n) {\n        return depth;\n    } else {\n        if (n \u003c t.value()) {\n            BinaryTreeNode left = t.left();\n            if (left == null) {\n                throw ...;\n            } else {\n                return calculateDepth(left, n) + 1;\n            }\n        } else {\n            BinaryTreeNode right = t.right();\n            if (right == null) {\n                throw ...;\n            } else {\n                return calculateDepth(right, n) + 1;\n            }\n        }\n    }\n\n    return depth;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311011723-5h59bgt","Type":"NodeParagraph","Properties":{"id":"20240311011723-5h59bgt","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"使用卫语句替代嵌套的条件语句后："}]},{"ID":"20240311011723-tp1pqhp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311011723-tp1pqhp","updated":"20240311011723"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public static int calculateDepth(BinaryTreeNode t, int n) {\n    if (t.value() == n) {\n        return 0;\n    } else if (n \u003c t.value() \u0026\u0026 t.left() != null) {\n        return calculateDepth(left, n) + 1;\n    } else if (n \u003e t.value() \u0026\u0026 t.right() != null) {\n        return calculateDepth(right, n) + 1;\n    }\n    throw ...;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311011723-fjamm5l","Type":"NodeParagraph","Properties":{"id":"20240311011723-fjamm5l","updated":"20240311011723"},"Children":[{"Type":"NodeText","Data":"提取方法后结果如下："}]},{"ID":"20240311011723-bj8kmay","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311011723-bj8kmay","updated":"20240311011723"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public static int calculateDepth(BinaryTreeNode t, int n) {\n    if (t.value() == n) {\n        return 0;\n    } else () {\n        return traverseByValue(t, n);\n    }\n}\n\nprivate static int traverseByValue(BinaryTreeNode t, int n) {\n    BinaryTreeNode child = getChildNode(t, n);\n    if (child == null) {\n        throw ...;\n    } else {\n        return calculateDepth(child, n) + 1;\n    }\n}\n\nprivate static BinaryTreeNode getChildNode(BinaryTreeNode t, int n) {\n    if (n \u003c t.value()) {\n        return t.left();\n    } else {\n        return t.right();\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}