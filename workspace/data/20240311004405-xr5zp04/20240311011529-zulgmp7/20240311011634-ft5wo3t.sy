{"ID":"20240311011634-ft5wo3t","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f607","id":"20240311011634-ft5wo3t","title":"编写短小的代码单元","updated":"20240311011817"},"Children":[{"ID":"20240311011702-ztisfi2","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311011702-ztisfi2","updated":"20240311011702"},"Children":[{"Type":"NodeText","Data":"原则"}]},{"ID":"20240311011702-76tfrgr","Type":"NodeList","ListData":{},"Properties":{"id":"20240311011702-76tfrgr","updated":"20240311011703"},"Children":[{"ID":"20240311011702-c0eadsa","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311011702-c0eadsa","updated":"20240311011702"},"Children":[{"ID":"20240311011702-a5v5pg4","Type":"NodeParagraph","Properties":{"id":"20240311011702-a5v5pg4","updated":"20240311011702"},"Children":[{"Type":"NodeText","Data":"代码长度应限制在 15 行以内"}]}]},{"ID":"20240311011702-2so98il","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311011702-2so98il","updated":"20240311011702"},"Children":[{"ID":"20240311011702-kd8egt6","Type":"NodeParagraph","Properties":{"id":"20240311011702-kd8egt6","updated":"20240311011702"},"Children":[{"Type":"NodeText","Data":"首先不要编写超过 15 行代码单元，或将长单元拆分成更短的单元"}]}]}]},{"ID":"20240311011702-86xla0q","Type":"NodeParagraph","Properties":{"id":"20240311011702-86xla0q","updated":"20240311011703"},"Children":[{"Type":"NodeText","Data":"原因：短小的代码单元易于理解、测试和重用"}]},{"ID":"20240311011702-m9tn8nm","Type":"NodeParagraph","Properties":{"id":"20240311011702-m9tn8nm","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20240311011817"},"Children":[{"Type":"NodeText","Data":"注意：代码长度不包括注释"}]},{"ID":"20240311011702-3bbw9po","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311011702-3bbw9po","updated":"20240311011702"},"Children":[{"Type":"NodeText","Data":"使用"}]},{"ID":"20240311011702-d0iofb5","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240311011702-d0iofb5","updated":"20240311011703"},"Children":[{"Type":"NodeText","Data":"提取方法"}]},{"ID":"20240311011702-5c6wwvk","Type":"NodeParagraph","Properties":{"id":"20240311011702-5c6wwvk","updated":"20240311011703"},"Children":[{"Type":"NodeText","Data":"将长代码的某些内容提取成一个单独方法中"}]},{"ID":"20240311011702-8svyetx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311011702-8svyetx","updated":"20240311011703"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public void start() {\n    if (isStarted) {\n        return;\n    }\n    isStarted = true;\n    // 当玩家死亡时更新\n    if (!isAnyPlayerAlive()) {\n        for (LevelObserver o: observers) {\n            o.levelLost();\n        }\n    }\n    // 当玩家胜利时更新\n    if (remainingPellets() == 0) {\n        for (LevelObserver o: observers) {\n            o.levelWin();\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311011702-4or0vep","Type":"NodeParagraph","Properties":{"id":"20240311011702-4or0vep","updated":"20240311011703"},"Children":[{"Type":"NodeText","Data":"拆分后："}]},{"ID":"20240311011702-9gblbtk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311011702-9gblbtk","updated":"20240311011703"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public void start() {\n    if (isStarted) {\n        return;\n    }\n    isStarted = true;\n    // 提取出的方法\n    updateObservers();\n}\n\nprivate void updateObservers() {\n    // 当玩家死亡时更新\n    if (!isAnyPlayerAlive()) {\n        for (LevelObserver o: observers) {\n            o.levelLost();\n        }\n    }\n    // 当玩家胜利时更新\n    if (remainingPellets() == 0) {\n        for (LevelObserver o: observers) {\n            o.levelWin();\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311011702-kusmfl3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240311011702-kusmfl3","updated":"20240311011703"},"Children":[{"Type":"NodeText","Data":"提取方法对象"}]},{"ID":"20240311011702-73heboy","Type":"NodeParagraph","Properties":{"id":"20240311011702-73heboy","updated":"20240311011703"},"Children":[{"Type":"NodeText","Data":"当提取方法后，提取的方法需要传入过多的参数，可以考虑将方法独立出一个类"}]},{"ID":"20240311011702-wqdswpl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311011702-wqdswpl","updated":"20240311011703"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"class BoardFactory {\n    public Board createBoard(Square[][] grid) {\n        assert grid != null;\n        Board board = new Board(grid);\n        int width = board.getWidth();\n        int height = board.getHeight();\n        for (int x = 0; i \u003c width; ++x) {\n            for (int y = 0; y \u003c height; ++y) {\n                Square square = grid[x][y];\n                for (Direction dir : Direction.values()) {\n                    int dirX = (width + x + dir.getDeltaX()) % width;\n                    int dirY = (height + y + dir.getDeltaY()) % height;\n                    Square neighbour = grid[dirX][dirY];\n                    square.link(neightbour, dir);\n                }\n            }\n        }\n        return board;\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311011702-mgfhbfs","Type":"NodeParagraph","Properties":{"id":"20240311011702-mgfhbfs","updated":"20240311011703"},"Children":[{"Type":"NodeText","Data":"首先考虑提取方法，可以看到循环内的功能是将方块与相邻方块连接。将循环内的方法提取出来"}]},{"ID":"20240311011702-4proq5v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311011702-4proq5v","updated":"20240311011703"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"class BoardFactory {\n    public Board createBoard(Square[][] grid) {\n        assert grid != null;\n        Board board = new Board(grid);\n        int width = board.getWidth();\n        int height = board.getHeight();\n        for (int x = 0; i \u003c width; ++x) {\n            for (int y = 0; y \u003c height; ++y) {\n                Square square = grid[x][y];\n                for (Direction dir : Direction.values()) {\n                    setSquareLink(square, dir, x, y, width, height, grid);\n                }\n            }\n        }\n        return board;\n    }\n\n    private void setSquareLink(Square square, Direction dir, int x, int y, int width, int height, Square[][] grid) {\n        int dirX = (width + x + dir.getDeltaX()) % width;\n        int dirY = (height + y + dir.getDeltaY()) % height;\n        Square neighbour = grid[dirX][dirY];\n        square.link(neightbour, dir);\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311011702-zjzsrpn","Type":"NodeParagraph","Properties":{"id":"20240311011702-zjzsrpn","updated":"20240311011703"},"Children":[{"Type":"NodeText","Data":"此时，分离出的方法参数过多，但很多变量都是重复的，可以考虑将原方法提取成类"}]},{"ID":"20240311011702-6lv809a","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311011702-6lv809a","updated":"20240311011703"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"class BoardCreator {\n    private final Square[][] grid;\n    private Board board;\n    private int width, height;\n\n    public BoardCreator(Square[][] grid) {\n        this.grid = grid;\n        this.board = new Board();\n        this.width = board.getWidth();\n        this.height = board.getHeight();\n    }\n\n    public Board create() {\n        for (int x = 0; i \u003c width; ++x) {\n            for (int y = 0; y \u003c height; ++y) {\n                Square square = grid[x][y];\n                for (Direction dir : Direction.values()) {\n                    setSquareLink(square, dir, x, y);\n                }\n            }\n        }\n    }\n\n    private void setSquareLink(Square square, Direction dir, int x, int y) {\n        int dirX = (width + x + dir.getDeltaX()) % width;\n        int dirY = (height + y + dir.getDeltaY()) % height;\n        Square neighbour = grid[dirX][dirY];\n        square.link(neightbour, dir);\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311011702-83gw7m8","Type":"NodeParagraph","Properties":{"id":"20240311011702-83gw7m8","updated":"20240311011703"},"Children":[{"Type":"NodeText","Data":"通过将方法转换成一个类，我们将部分参数转换成了类的成员变量"}]},{"ID":"20240311011702-1lii8xd","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311011702-1lii8xd","updated":"20240311011702"},"Children":[{"Type":"NodeText","Data":"例外"}]},{"ID":"20240311011702-e55t5ai","Type":"NodeParagraph","Properties":{"id":"20240311011702-e55t5ai","updated":"20240311011703"},"Children":[{"Type":"NodeText","Data":"如链式调用、组装 SQL、组装 HTML 语句等，拆分后可见的长度也不会很短，此时应该考虑是否适合使用其他手段构建，如模板等"}]}]}