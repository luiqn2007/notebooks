{"ID":"20240311175948-b9ymzpp","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240311175948-b9ymzpp","title":"例：时间服务器","updated":"20240311180326"},"Children":[{"ID":"20240311180002-zl9jod4","Type":"NodeParagraph","Properties":{"id":"20240311180002-zl9jod4","updated":"20240311180326"},"Children":[{"Type":"NodeText","Data":"服务器方面，同样只是将 "},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240311173832-6w9urkq","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":" 改变一下即可。"}]},{"ID":"20240311180002-axxzrae","Type":"NodeParagraph","Properties":{"id":"20240311180002-axxzrae","updated":"20240311180002"},"Children":[{"Type":"NodeText","Data":"由于我们不关心任何客户端发送过来的数据，凡是客户端发送的数据，我们都直接回复当前时间，因此我们重写 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"channelActive"},{"Type":"NodeText","Data":"​ 方法而不是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"channelRead"},{"Type":"NodeText","Data":"​ - 不进行读操作。"}]},{"ID":"20240311180002-xa9hzrx","Type":"NodeList","ListData":{},"Properties":{"id":"20240311180002-xa9hzrx","updated":"20240311180023"},"Children":[{"ID":"20240311180002-kzyl19m","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311180002-kzyl19m","updated":"20240311180002"},"Children":[{"ID":"20240311180002-jrp1r9y","Type":"NodeParagraph","Properties":{"id":"20240311180002-jrp1r9y","updated":"20240311180002"},"Children":[{"Type":"NodeText","Data":"在准备数据时，我们使用了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ChannelHandlerContext#alloc()"},{"Type":"NodeText","Data":"​ 返回的申请器申请了一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ByteBuf"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20240311180002-b8542zf","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311180002-b8542zf","updated":"20240311180023"},"Children":[{"ID":"20240311180002-xktnzmy","Type":"NodeParagraph","Properties":{"id":"20240311180002-xktnzmy","updated":"20240311180023"},"Children":[{"Type":"NodeText","Data":"发送数据返回的仍是一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Future"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240311173612-7wai7zn","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"Netty"},{"Type":"NodeText","Data":" 的操作都是异步的，我们需要注册监听器等待发送完成后关闭连接"}]}]}]},{"ID":"20240311180010-xbvcy7j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311180010-xbvcy7j","updated":"20240311180010"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"class TimerServerHandler extends ChannelInboundHandlerAdapter {\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) {\n        // 准备时间数据\n        ByteBuf buffer = ctx.alloc().buffer(4);\n        buffer.writeInt((int) (System.currentTimeMillis() / 1000L + 2208988800L));\n        // 发送数据\n        ChannelFuture future = ctx.writeAndFlush(buffer);\n        future.addListener((ChannelFutureListener) f -\u003e ctx.close());\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311180010-siyrdw5","Type":"NodeParagraph","Properties":{"id":"20240311180010-siyrdw5","updated":"20240311180010"},"Children":[{"Type":"NodeText","Data":"客户端方面，创建客户端的步骤与服务器差距不大，但有以下区别："}]},{"ID":"20240311180010-unbumj1","Type":"NodeList","ListData":{},"Properties":{"id":"20240311180010-unbumj1","updated":"20240311180010"},"Children":[{"ID":"20240311180010-0mlerzn","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311180010-0mlerzn","updated":"20240311180010"},"Children":[{"ID":"20240311180010-vmqc0ol","Type":"NodeParagraph","Properties":{"id":"20240311180010-vmqc0ol","updated":"20240311180010"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Bootstrap"},{"Type":"NodeText","Data":"​ 代替 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ServerBootstrap"},{"Type":"NodeText","Data":"​，没有传输模式选择"}]}]},{"ID":"20240311180010-md74734","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311180010-md74734","updated":"20240311180010"},"Children":[{"ID":"20240311180010-v9k43j8","Type":"NodeParagraph","Properties":{"id":"20240311180010-v9k43j8","updated":"20240311180010"},"Children":[{"Type":"NodeText","Data":"通道使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"NioSocketChannel"},{"Type":"NodeText","Data":"​ 代替 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"NioServerSocketChannel"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20240311180010-shijqe7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311180010-shijqe7","updated":"20240311180010"},"Children":[{"ID":"20240311180010-jhnk6ox","Type":"NodeParagraph","Properties":{"id":"20240311180010-jhnk6ox","updated":"20240311180010"},"Children":[{"Type":"NodeText","Data":"客户端连接相对简单，只需要定义一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"EventLoopGroup"},{"Type":"NodeText","Data":"​ 即可，该对象同时承担 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"worker"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"boss"},{"Type":"NodeText","Data":"​ 的职责"}]}]},{"ID":"20240311180010-dyqkpsc","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311180010-dyqkpsc","updated":"20240311180010"},"Children":[{"ID":"20240311180010-sdx7eyp","Type":"NodeParagraph","Properties":{"id":"20240311180010-sdx7eyp","updated":"20240311180010"},"Children":[{"Type":"NodeText","Data":"由于客户端 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SocketChannel"},{"Type":"NodeText","Data":"​ 没有 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"parent"},{"Type":"NodeText","Data":"​，因此无需设置 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"childOption"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20240311180010-vp5vgit","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311180010-vp5vgit","updated":"20240311180010"},"Children":[{"ID":"20240311180010-s2eki6p","Type":"NodeParagraph","Properties":{"id":"20240311180010-s2eki6p","updated":"20240311180010"},"Children":[{"Type":"NodeText","Data":"连接时使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"connect"},{"Type":"NodeText","Data":"​ 表示连接一个服务器，而不是使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"bind"},{"Type":"NodeText","Data":"​ 绑定监听端口"}]}]}]},{"ID":"20240311180010-iu6r8ya","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311180010-iu6r8ya","updated":"20240311180010"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class TimeClient {\n    private final int port;\n  \n    public TimeClient(int port) {\n        this.port = port;\n    }\n  \n    public void run() throws InterruptedException {\n        EventLoopGroup worker = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(worker)\n                    .option(ChannelOption.SO_KEEPALIVE, true)\n                    .channel(NioSocketChannel.class)\n                    .handler(new ChannelInitializer\u003cSocketChannel\u003e() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) {\n                            ch.pipeline().addLast(new TimeClientHandler());\n                        }\n                    });\n                \n            ChannelFuture future = bootstrap.connect(\"localhost\", port).sync();\n            future.channel().closeFuture().sync();\n        } finally {\n            worker.shutdownGracefully();\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311180010-n0549zg","Type":"NodeParagraph","Properties":{"id":"20240311180010-n0549zg","updated":"20240311180010"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TimeClientHandler"},{"Type":"NodeText","Data":"​ 是自定义的处理方法，内部直接读取时间信息并输出"}]},{"ID":"20240311180010-xcjcyty","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311180010-xcjcyty","updated":"20240311180010"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"class TimeClientHandler extends ChannelInboundHandlerAdapter {\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n        ByteBuf buf = (ByteBuf) msg;\n        try {\n            long time = (buf.readUnsignedInt() - 2208988800L) * 1000L;\n            System.out.println(new Date(time));\n        } finally {\n            ctx.close();\n            buf.release();\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}