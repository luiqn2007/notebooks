{"ID":"20240310162401-hgkokae","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f527","id":"20240310162401-hgkokae","tags":"C++11","title":"初始化列表构造","updated":"20240311105500"},"Children":[{"ID":"20240310162407-f4mfclk","Type":"NodeParagraph","Properties":{"id":"20240310162407-f4mfclk","updated":"20240310162407"},"Children":[{"Type":"NodeText","Data":"C++11 将初始化列表使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"std::initializer_list"},{"Type":"NodeText","Data":"​ 类实现，使类也能够使用任意初始化列表构造："}]},{"ID":"20240310162407-wqnp67x","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310162407-wqnp67x","updated":"20240310162407"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"class A {\n    public:\n    A(std::inititalizer_list\u003cint\u003e list);\n}\n\nA a = {1, 3, 5, 7, 9};\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240310162407-be0sxvp","Type":"NodeParagraph","Properties":{"id":"20240310162407-be0sxvp","updated":"20240311105500"},"Children":[{"Type":"NodeText","Data":"这类"},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240310161644-g7cva4b","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"构造函数"},{"Type":"NodeText","Data":"称为"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"初始化列表构造函数"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"vector\u0026lt;T\u0026gt;"},{"Type":"NodeText","Data":"​​​​ 等标准容器类型都包含了这类构造。该方法统一了普通对象/结构体、数组、STL 容器等的初始化方式"}]},{"ID":"20240311103240-z66ropi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311103240-z66ropi","updated":"20240311103240"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"int x[] { 1, 2, 3 };\nstd::vector\u003cint\u003e y { 1, 2, 3 };\nstd::set\u003cint\u003e z { 1, 2, 3 };\nstd::map\u003cint, char\u003e w { {1, 'a'}, {2, 'b'}, {3, 'c'} };\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240310162407-9kfauh5","Type":"NodeParagraph","Properties":{"id":"20240310162407-9kfauh5","updated":"20240310162407"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"std::inititalizer_list\u0026lt;T\u0026gt;"},{"Type":"NodeText","Data":"​ 类为标准类，因此可以在其他地方使用，如函数："}]},{"ID":"20240310162407-uy47n33","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310162407-uy47n33","updated":"20240310162407"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"void f(std::initializer_list\u003cfloat\u003e list);\n\nf({1f, 2f, 3f});\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311103310-y7awplk","Type":"NodeParagraph","Properties":{"id":"20240311103310-y7awplk","updated":"20240311103345"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"{}"},{"Type":"NodeText","Data":"​ 初始化既可以匹配一般构造函数，也可以匹配列表构造函数。当可以同时匹配普通构造函数和列表构造函数时，c++ 优先使用列表构造初始化。"}]}]}