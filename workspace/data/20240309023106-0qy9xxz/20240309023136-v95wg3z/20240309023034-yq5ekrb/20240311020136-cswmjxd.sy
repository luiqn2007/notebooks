{"ID":"20240311020136-cswmjxd","Spec":"1","Type":"NodeDocument","Properties":{"icon":"2620-fe0f","id":"20240311020136-cswmjxd","tags":"C++11,C++14","title":"用户自定义字面量","updated":"20240311020434"},"Children":[{"ID":"20240311020136-vvgqpb2","Type":"NodeParagraph","Properties":{"id":"20240311020136-vvgqpb2","updated":"20240311020145"},"Children":[{"Type":"NodeText","Data":"用户自定义字面量"}]},{"ID":"20240311020214-379osom","Type":"NodeParagraph","Properties":{"id":"20240311020214-379osom","updated":"20240311020434"},"Children":[{"Type":"NodeText","Data":"C++11 引入用户自定义字面量，可以将"},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240310145226-1lx528p","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"字符串"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240310012648-wduhjoc","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"数字"},{"Type":"NodeText","Data":"等字面量加一个后缀转换为"},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240310150515-ksccl6h","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"对象"},{"Type":"NodeText","Data":"，通过定义 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026quot;\u0026quot; 后缀"},{"Type":"NodeText","Data":"​ "},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240310170946-t8xwxdn","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"运算符"},{"Type":"NodeText","Data":"来实现。"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"后缀应以"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","TextMarkType":"strong code","TextMarkTextContent":"_"},{"Type":"NodeText","Data":"​ "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"开头"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240311020214-ye8o0im","Type":"NodeParagraph","Properties":{"id":"20240311020214-ye8o0im","updated":"20240311020214"},"Children":[{"Type":"NodeText","Data":"C++14 后，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026quot;\u0026quot;"},{"Type":"NodeText","Data":"​ 与后缀之间的空格可以省略，且后缀允许使用 C++ 关键字，即可以使用诸如 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"23if"},{"Type":"NodeText","Data":"​ 这样的字面量"}]},{"ID":"20240311020214-avdln0l","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311020214-avdln0l","updated":"20240311020214"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"const size_t LEN_KM = 1000000;\nconst size_t LEN_M = 1000;\nconst size_t LEN_CM = 10;\n\n// 以毫米 mm 记录的线段长度\nstruct Length {\n    const size_t len_mm;\n\n    string str() const {\n        if (len_mm) {\n            stringstream ss;\n            size_t v = len_mm;\n            while (v) {\n                if (v \u003e= LEN_KM) {\n                    ss \u003c\u003c (v / LEN_KM) \u003c\u003c \"km\";\n                    v %= LEN_KM;\n                } else if (v \u003e= LEN_M) {\n                    ss \u003c\u003c (v / LEN_M) \u003c\u003c \"m\";\n                    v %= LEN_M;\n                } else if (v \u003e= LEN_CM) {\n                    ss \u003c\u003c (v / LEN_CM) \u003c\u003c \"cm\";\n                    v %= LEN_CM;\n                } else {\n                    ss \u003c\u003c v \u003c\u003c \"mm\";\n                    break;\n                }\n            }\n            return ss.str();\n        } else {\n            return \"0mm\";\n        }\n    }\n};\n\n// 字面量运算符\nLength operator \"\" _mm(size_t v) {\n    return Length{v};\n}\n\nLength operator \"\" _cm(size_t v) {\n    return Length{v * LEN_CM};\n}\n\nLength operator \"\" _m(size_t v) {\n    return Length{v * LEN_M};\n}\n\nLength operator \"\" _km(size_t v) {\n    return Length{v * LEN_KM};\n}\n\n// 其他运算符\nLength operator+(const Length \u0026a, const Length \u0026b) {\n    return Length{a.len_mm + b.len_mm};\n}\n\nLength operator-(const Length \u0026a, const Length \u0026b) {\n    return Length{a.len_mm - b.len_mm};\n}\n\nvoid operator\u003c\u003c(basic_ostream\u003cchar\u003e \u0026s, const Length \u0026len) {\n    s \u003c\u003c len.str();\n}\n\nint main() {\n    Length a = 5_cm + 10_km - 100_m + 257_mm;\n    // 9km900m30cm7mm\n    cout \u003c\u003c a;\n    return 0;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}