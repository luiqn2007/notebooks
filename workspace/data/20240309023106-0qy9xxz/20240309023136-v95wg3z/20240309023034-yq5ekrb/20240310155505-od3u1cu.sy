{"ID":"20240310155505-od3u1cu","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f527","id":"20240310155505-od3u1cu","tags":"C++11","title":"auto 推断","updated":"20240311113855"},"Children":[{"ID":"20240310155505-xfh5jpy","Type":"NodeParagraph","Properties":{"id":"20240310155505-xfh5jpy","updated":"20240310155541"},"Children":[{"Type":"NodeText","Data":"C++ 编译器可在编译时感知所有数据的类型，因此可以实现类型推断。"}]},{"ID":"20240310155543-wuiyh4x","Type":"NodeParagraph","Properties":{"id":"20240310155543-wuiyh4x","updated":"20240310212756"},"Children":[{"Type":"NodeText","Data":"C++11 开始引入 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"auto"},{"Type":"NodeText","Data":"​​ 完成基本的"},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240309023034-yq5ekrb","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"类型"},{"Type":"NodeText","Data":"推断操作。我们可以通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"auto"},{"Type":"NodeText","Data":"​​ 让编译器自动推断一个变量的类型，称为类型推断。其形式为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"auto x = expr"},{"Type":"NodeText","Data":"​​。"}]},{"ID":"20240310155615-tmb37px","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310155615-tmb37px","updated":"20240310155615"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"auto a = 10;\nauto b = a * 3;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240310155615-uarosma","Type":"NodeParagraph","Properties":{"id":"20240310155615-uarosma","updated":"20240311020838"},"Children":[{"Type":"NodeText","Data":"允许同时声明多个变量，遵循自左向右推导规则，取第一个变量的推导类型"}]},{"ID":"20240311020844-70r5u83","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311020844-70r5u83","updated":"20240311020844"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"int n = 5;\n// 根据 \u0026n 推断 auto 为 int\nauto *pn = \u0026n, m = 10;\n// 编译错误：根据 \u0026n 推断 auto 为 int，不符合 m2 类型\nauto *pn2 = \u0026n, m2 = 10.0;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311020837-oqlxa8f","Type":"NodeParagraph","Properties":{"id":"20240311020837-oqlxa8f","updated":"20240311020837"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"auto"},{"Type":"NodeText","Data":"​ 可用于对"},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240310152245-u8ymkhl","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"函数指针"},{"Type":"NodeText","Data":"的"},{"Type":"NodeTextMark","TextMarkType":"inline-memo","TextMarkInlineMemoContent":"执行结果：_esc_newline_12_esc_newline_i_esc_newline_PFiiiE","TextMarkTextContent":"简化写法"}]},{"ID":"20240310155615-bkfo2ko","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310155615-bkfo2ko","updated":"20240310155615"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"#include\u003ciostream\u003e\n\nusing namespace std;\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {  \n    auto add_func = add;\n    cout \u003c\u003c add_func(5, 7) \u003c\u003c endl;\n    cout \u003c\u003c typeid(add_func(5, 7)).name() \u003c\u003c endl;\n    cout \u003c\u003c typeid(add_func).name() \u003c\u003c endl;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240310155617-azxplsw","Type":"NodeParagraph","Properties":{"id":"20240310155617-azxplsw","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20240310155806"},"Children":[{"Type":"NodeText","Data":"可以在使用 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"auto"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​ 的情况下使用初始化列表，但不要在使用初始化列表的同时使用 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"="},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​ 运算符赋值，当直接使用 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"="},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​ 将初始化列表赋值给一个 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"auto"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​ 变量时，"},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"inline-memo","TextMarkInlineMemoContent":"下方实例运行结果：_esc_newline_Type of a is i_esc_newline_Type of b is i_esc_newline_Type of c is i_esc_newline_Type of d is St16initializer_listIiE","TextMarkTextContent":"实际上是将初始化列表对象赋值给了它"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240310155659-bncyctx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310155659-bncyctx","updated":"20240310155706"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"#include\u003ciostream\u003e\n\nusing namespace std;\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {  \n    int a {5};  \n    auto b {5};  \n    int c = {5};  \n    auto d = {5};  \n    cout \u003c\u003c \"Type of a is \" \u003c\u003c typeid(a).name() \u003c\u003c endl;  \n    cout \u003c\u003c \"Type of b is \" \u003c\u003c typeid(b).name() \u003c\u003c endl;  \n    cout \u003c\u003c \"Type of c is \" \u003c\u003c typeid(c).name() \u003c\u003c endl;  \n    cout \u003c\u003c \"Type of d is \" \u003c\u003c typeid(d).name() \u003c\u003c endl;  \n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240310155719-o3y31f3","Type":"NodeParagraph","Properties":{"id":"20240310155719-o3y31f3","updated":"20240311020902"},"Children":[{"Type":"NodeText","Data":"可用在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"new"},{"Type":"NodeText","Data":"​ 关键字之后，但不常用"}]},{"ID":"20240311020910-br8pdxu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311020910-br8pdxu","updated":"20240311020910"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"// 经过两次推导，第一次推导右侧 auto 类型为 int，第二次推导 i 类型为 int*\nauto i = new auto(5);\n// 经过两次推导，第一次推导右侧 auto 类型为 int，第二次推导 *j 类型为 int\nauto *j = new auto(7);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311020857-f6hgv41","Type":"NodeParagraph","Properties":{"id":"20240311020857-f6hgv41","updated":"20240311113855"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"auto"},{"Type":"NodeText","Data":"​ 关键字还可以用于"},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240310212833-c52623h","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"结构化绑定"},{"Type":"NodeText","Data":"。使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"auto"},{"Type":"NodeText","Data":"​ 可为解构的元组变量统一增加 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"const"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026amp;"},{"Type":"NodeText","Data":"​ 标记等"}]},{"ID":"20240310155719-cmmlxpw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310155719-cmmlxpw","updated":"20240310155719"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"int a[2] = {1, 2};\n\n// x, y: int\nauto [x, y] = a;\n// m, n: \u0026int\nauto\u0026 [m, n] = a;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240310155719-8sg1bsk","Type":"NodeParagraph","Properties":{"id":"20240310155719-8sg1bsk","updated":"20240310213036"},"Children":[{"Type":"NodeText","Data":"当 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"auto"},{"Type":"NodeText","Data":"​​ 关键字用于函数或 "},{"Type":"NodeTextMark","TextMarkType":"code block-ref","TextMarkBlockRefID":"20240310154429-pfz8p3x","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"lambda"},{"Type":"NodeText","Data":"​​ 表达式时，表示该函数根据 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"return"},{"Type":"NodeText","Data":"​​ 语句推断返回值类型。这同样适用于函数指针"}]},{"ID":"20240310155719-cpwwm6h","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310155719-cpwwm6h","updated":"20240310155719"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"auto add(int a, int b) {\n    // 类型推断：int + int =\u003e int\n    return a + b;\n}\n\n// 函数指针名：p\n// 返回值类型：int\nauto (*p)() -\u003e int;\n// 函数指针名：q\n// 返回值类型：根据 p 推导\nauto (*q)() -\u003e auto = p;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311021356-jhy148s","Type":"NodeParagraph","Properties":{"id":"20240311021356-jhy148s"}}]}