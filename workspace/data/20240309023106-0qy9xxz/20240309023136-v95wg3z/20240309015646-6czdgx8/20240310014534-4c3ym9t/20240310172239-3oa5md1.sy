{"ID":"20240310172239-3oa5md1","Spec":"1","Type":"NodeDocument","Properties":{"icon":"2328-fe0f","id":"20240310172239-3oa5md1","title":"if consteval","updated":"20240310172248"},"Children":[{"ID":"20240310172248-hyjdmx3","Type":"NodeParagraph","Properties":{"id":"20240310172248-hyjdmx3","updated":"20240310172248"},"Children":[{"Type":"NodeText","Data":"该特性用于在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"if"},{"Type":"NodeText","Data":"​​ 中判断当前是否是在编译期。"}]},{"ID":"20240310172248-ol2j445","Type":"NodeParagraph","Properties":{"id":"20240310172248-ol2j445","updated":"20240310233424"},"Children":[{"Type":"NodeText","Data":"假设有一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"constexpr"},{"Type":"NodeText","Data":"​​ 函数 a 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"consteval"},{"Type":"NodeText","Data":"​​ 函数 b，在 a 中我们需要做的是根据当前环境，若是在编译期调用的，则执行 b，否则做其他事。在 C++23 之前，我们其实无法实现：."}]},{"ID":"20240310172248-9vo14yj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310172248-9vo14yj","updated":"20240310172248"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"// a: some_computation\nconsteval int compiler_computation(int i) {\n    // 编译期计算\n    return i;\n}\n\n// b: compiler_computation\nconstexpr int some_computation(int i) {\n    if (std::is_constant_evaluated()) {\n        // 编译期计算\n        return compiler_computation(i);\n    } else {\n        // 非编译期\n        return i;\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240310172248-dq5h39c","Type":"NodeParagraph","Properties":{"id":"20240310172248-dq5h39c","updated":"20240310233351"},"Children":[{"Type":"NodeText","Data":"上面代码片段的问题在于，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"std::is_constant_evaluated"},{"Type":"NodeText","Data":"​​ 事实上可以用于检查是否是编译期，但其检查结果无法传递给编译器，因此编译器会认为当前分支仍然有可能在运行时调用，因此 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"consteval"},{"Type":"NodeText","Data":"​​ 会产生错误。"}]},{"ID":"20240310172248-q579c9z","Type":"NodeParagraph","Properties":{"id":"20240310172248-q579c9z","updated":"20240310172248"},"Children":[{"Type":"NodeText","Data":"于是，我们改成 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"if constexpr"},{"Type":"NodeText","Data":"​："}]},{"ID":"20240310172248-sochbsn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310172248-sochbsn","updated":"20240310172248"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"constexpr int some_computation(int i) {\n    if constexpr (std::is_constant_evaluated()) {\n        // 编译期计算\n        return compiler_computation(i);\n    } else {\n        // 非编译期\n        return i;\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240310172248-2y8x02m","Type":"NodeParagraph","Properties":{"id":"20240310172248-2y8x02m","updated":"20240310194034"},"Children":[{"Type":"NodeText","Data":"但问题显而易见 -- "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"if constexpr"},{"Type":"NodeText","Data":"​ 的条件永远会在编译期计算！也就是说，"},{"Type":"NodeTextMark","TextMarkType":"inline-memo","TextMarkInlineMemoContent":"std::is_constant_evaluated() 在编译时被评估，结果为 true，所以只保留了编译时分支","TextMarkTextContent":"经过编译"},{"Type":"NodeText","Data":"，我们的函数会退化成下面的样子，显然也是错误的："}]},{"ID":"20240310193853-1fqs1rw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310193853-1fqs1rw","updated":"20240310194025"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"constexpr int some_computation(int i) {\n    return compiler_computation(i);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240310172248-wtttuy2","Type":"NodeParagraph","Properties":{"id":"20240310172248-wtttuy2","updated":"20240310172248"},"Children":[{"Type":"NodeText","Data":"所以，C++23 新增 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"if consteval"},{"Type":"NodeText","Data":"​，用于区分编译期和运行时。注意 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"{}"},{"Type":"NodeText","Data":"​ 不能省略。"}]},{"ID":"20240310172248-zbpsw6d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310172248-zbpsw6d","updated":"20240310172248"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"constexpr int some_computation(int i) {\n    if consteval {\n        // 编译期计算\n        return compiler_computation(i);\n    } else {\n        // 非编译期\n        return i;\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}