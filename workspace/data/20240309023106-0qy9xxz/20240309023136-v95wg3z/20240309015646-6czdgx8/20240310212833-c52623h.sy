{"ID":"20240310212833-c52623h","Spec":"1","Type":"NodeDocument","Properties":{"icon":"2620-fe0f","id":"20240310212833-c52623h","tags":"C++17","title":"结构化绑定","updated":"20240311114022"},"Children":[{"ID":"20240310212833-wovyuji","Type":"NodeParagraph","Properties":{"id":"20240310212833-wovyuji","style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);","updated":"20240311113910"},"Children":[{"Type":"NodeText","Data":"结构化绑定：将一个或多个名称绑定到目标对象的一个或多个成员元素上"}]},{"ID":"20240311113919-yto124y","Type":"NodeParagraph","Properties":{"id":"20240311113919-yto124y","updated":"20240311113923"},"Children":[{"Type":"NodeText","Data":"C++11 引入元组的概念，使 C++ 支持直接打包多个元素，并在现有的语法上配合引用实现了类似结构化绑定的特征："}]},{"ID":"20240311113919-swmoq1n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311113919-swmoq1n","updated":"20240311113919"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"// 创建元组\nstd::tuple\u003cint, double, float\u003e tuple = std::make_tuple(10, 2.0, 1.99f);\n\n// 类似结构化绑定的用法\nint a;\ndouble b;\nfloat c;\nstd::tie(a, b, c) = tuple;\n// a=10, b=2.0, c=1.99f\nprintf(\"a=%d, b=%lf, c=%f\", a, b, c);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311113919-bjf9rsx","Type":"NodeParagraph","Properties":{"id":"20240311113919-bjf9rsx","updated":"20240311113925"},"Children":[{"Type":"NodeText","Data":"C++17 开始从语法上支持结构化绑定，并允许使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"auto"},{"Type":"NodeText","Data":"​ 进行类型推断"}]},{"ID":"20240311113919-g8kuqwc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311113919-g8kuqwc","updated":"20240311113919"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"// 创建元组\nstd::tuple\u003cint, double, float\u003e tuple = std::make_tuple(10, 2.0, 1.99f);\n// 结构化绑定\nauto [a, b, c] = tuple;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311113919-rqjadmw","Type":"NodeParagraph","Properties":{"id":"20240311113919-rqjadmw","updated":"20240311113919"},"Children":[{"Type":"NodeText","Data":"注意 a，b，c 这里不是引用，而是一个独立的变量（"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"tuple"},{"Type":"NodeText","Data":"​ 值的副本），虽然称为别名"}]},{"ID":"20240311113919-00lsbez","Type":"NodeParagraph","Properties":{"id":"20240311113919-00lsbez","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20240311113940"},"Children":[{"Type":"NodeText","Data":"事实上，结构化绑定的实现可能是编译器产生一个变量，等于右边目标对象对应成员"}]},{"ID":"20240311113919-f14o6pj","Type":"NodeParagraph","Properties":{"id":"20240311113919-f14o6pj","updated":"20240311113919"},"Children":[{"Type":"NodeText","Data":"如果需要获取引用的绑定，使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"auto\u0026amp;"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240311113919-3pno364","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311113919-3pno364","updated":"20240311113919"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"// 创建元组\nstd::tuple\u003cint, double, float\u003e tuple = std::make_tuple(10, 2.0, 1.99f);\n// 结构化绑定\nauto\u0026 [a, b, c] = tuple;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311113919-70tgjsd","Type":"NodeParagraph","Properties":{"id":"20240311113919-70tgjsd","updated":"20240311113919"},"Children":[{"Type":"NodeText","Data":"结构化绑定不仅支持元组，其支持绑定任何数组和对象，但有一定的限制。每个绑定都相当于一组变量声明，因此同一个作用域的结构化绑定中变量名不能相同。"}]},{"ID":"20240311113919-6da1ple","Type":"NodeParagraph","Properties":{"id":"20240311113919-6da1ple","updated":"20240311113919"},"Children":[{"Type":"NodeText","Data":"对于数组，编译器要求必须知道数组的长度。此时应注意数组退化，一旦退化成指针则无法进行绑定。"}]},{"ID":"20240311113919-8j30gcz","Type":"NodeParagraph","Properties":{"id":"20240311113919-8j30gcz","updated":"20240311113919"},"Children":[{"Type":"NodeText","Data":"对于对象，要求有以下内容："}]},{"ID":"20240311113919-0u48qba","Type":"NodeList","ListData":{},"Properties":{"id":"20240311113919-0u48qba","updated":"20240311114010"},"Children":[{"ID":"20240311113919-ic9apnf","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311113919-ic9apnf","updated":"20240311114010"},"Children":[{"ID":"20240311113919-en78od7","Type":"NodeParagraph","Properties":{"id":"20240311113919-en78od7","updated":"20240311114010"},"Children":[{"Type":"NodeText","Data":"C++ 20 前，要求所有成员必须是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"public"},{"Type":"NodeText","Data":"​ 的"}]}]},{"ID":"20240311113919-08642w1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311113919-08642w1","updated":"20240311113919"},"Children":[{"ID":"20240311113919-2kpje3o","Type":"NodeParagraph","Properties":{"id":"20240311113919-2kpje3o","updated":"20240311113919"},"Children":[{"Type":"NodeText","Data":"被绑定的变量数量必须与类非静态成员变量数量相同"}]}]},{"ID":"20240311113919-1og766p","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311113919-1og766p","updated":"20240311113919"},"Children":[{"ID":"20240311113919-6bxa4mq","Type":"NodeParagraph","Properties":{"id":"20240311113919-6bxa4mq","updated":"20240311113919"},"Children":[{"Type":"NodeText","Data":"所有变量必须存在同一个类或基类中"}]}]},{"ID":"20240311113919-guli761","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240311113919-guli761","updated":"20240311113919"},"Children":[{"ID":"20240311113919-5kaju6v","Type":"NodeParagraph","Properties":{"id":"20240311113919-5kaju6v","updated":"20240311113919"},"Children":[{"Type":"NodeText","Data":"类和结构体中不能存在匿名联合体（union）"}]}]}]},{"ID":"20240311113919-pz6o6rx","Type":"NodeParagraph","Properties":{"id":"20240311113919-pz6o6rx","updated":"20240311114022"},"Children":[{"Type":"NodeText","Data":"C++20 之前要求对象成员必须是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"public"},{"Type":"NodeText","Data":"​ 的，"},{"Type":"NodeTextMark","TextMarkType":"tag","TextMarkTextContent":"C++20"},{"Type":"NodeText","Data":"​ 及之后允许根据当前作用域判断元素是否可被访问。"}]}]}