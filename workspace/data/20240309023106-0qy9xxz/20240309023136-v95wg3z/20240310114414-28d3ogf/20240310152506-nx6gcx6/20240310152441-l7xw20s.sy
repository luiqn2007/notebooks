{"ID":"20240310152441-l7xw20s","Spec":"1","Type":"NodeDocument","Properties":{"icon":"2620-fe0f","id":"20240310152441-l7xw20s","title":"按值传递","updated":"20240310221204"},"Children":[{"ID":"20240310152457-8l4rzyg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310152457-8l4rzyg","updated":"20240310152457"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"#include\u003ciostream\u003e\n\nusing namespace std;\n\nstatic int ID {0};\n\nclass A {\npublic:\n\n    A() { cout \u003c\u003c \"create A\" \u003c\u003c \", id=\" \u003c\u003c id \u003c\u003c endl; }\n    A(const A \u0026a) { cout \u003c\u003c \"create A by A\u0026\" \u003c\u003c \", id=\" \u003c\u003c id \u003c\u003c endl; }\n    ~A() { cout \u003c\u003c \"remove A\" \u003c\u003c \", id=\" \u003c\u003c id \u003c\u003c endl; }\n\n    int value {};\n    int id {ID++};\n};\n\nvoid set_value(A a, int value) {\n    a.value = value;\n    cout \u003c\u003c \"Value in set_value is \" \u003c\u003c a.value \u003c\u003c \", id=\" \u003c\u003c a.id \u003c\u003c endl;\n}\n\nint main() {\n    // create A, id=0\n    A a;\n    // Value before set_value is 0, id=0\n    cout \u003c\u003c \"Value before set_value is \" \u003c\u003c a.value \u003c\u003c \", id=\" \u003c\u003c a.id \u003c\u003c endl;\n    // create A by A\u0026, id=1\n    // Value in set_value is 20, id=1\n    // remove A, id=1\n    set_value(a, 20);\n    // Value after set_value is 0, id=0\n    cout \u003c\u003c \"Value after set_value is \" \u003c\u003c a.value \u003c\u003c \", id=\" \u003c\u003c a.id \u003c\u003c endl;\n    // remove A, id=0\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240310152457-fe5hk0k","Type":"NodeParagraph","Properties":{"id":"20240310152457-fe5hk0k","updated":"20240310221204"},"Children":[{"Type":"NodeText","Data":"直接传递对象本体，传递的是对象的副本（使用复制构造），并在函数运行完成后释放"}]}]}