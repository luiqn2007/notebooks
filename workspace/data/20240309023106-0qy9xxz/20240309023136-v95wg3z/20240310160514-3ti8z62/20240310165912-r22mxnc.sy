{"ID":"20240310165912-r22mxnc","Spec":"1","Type":"NodeDocument","Properties":{"icon":"2328-fe0f","id":"20240310165912-r22mxnc","title":"可变参数模板","updated":"20240310225214"},"Children":[{"ID":"20240310165919-fq6oxgn","Type":"NodeParagraph","Properties":{"id":"20240310165919-fq6oxgn","updated":"20240310225214"},"Children":[{"Type":"NodeText","Data":"C++11 允许使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"..."},{"Type":"NodeText","Data":"​ 定义任意个数、任意类别的"},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240310160514-3ti8z62","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"模板"},{"Type":"NodeText","Data":"参数，不必在定义时固定参数个数"}]},{"ID":"20240310165919-v3nrr3l","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310165919-v3nrr3l","updated":"20240310165919"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"template\u003ctypename... TYPES\u003e class Tuple;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240310165919-t1acx77","Type":"NodeParagraph","Properties":{"id":"20240310165919-t1acx77","updated":"20240310165919"},"Children":[{"Type":"NodeText","Data":"可变参数模板在模板函数中，配合函数的不定长参数可安全的处理不定长参数的类型"}]},{"ID":"20240310165919-mamveoq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310165919-mamveoq","updated":"20240310165919"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"template\u003ctypename... PARAMS\u003e void printf(const std::string \u0026str, PARAMS.. parameters);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240310165919-br6z4xw","Type":"NodeParagraph","Properties":{"id":"20240310165919-br6z4xw","updated":"20240310165919"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"PARAMS..."},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"parameters"},{"Type":"NodeText","Data":"​ 分别代表变长类型集合和变长参数集合，被称为参数包。无法直接解开参数包，通常使用递归方法解包："}]},{"ID":"20240310165919-rj8pe5y","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310165919-rj8pe5y","updated":"20240310165919"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"void printf(const char *s) {\n    std::cout \u003c\u003c s;\n}\n\ntemplate\u003ctypename T, typename... ARGS\u003e\nvoid printf(const char *s, T value, Args... args) {\n    if (*s == '%' \u0026\u0026 *(++s) != '%') {\n        std::cout \u003c\u003c value;\n        // 当 args 为空时，调用 void printf(cosnt char *s)\n        // 当 args 非空时，调用 void printf(const char *s, T value, Args... args)\n        printf(*s ? ++s : s, args...);\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240310165919-desquxy","Type":"NodeParagraph","Properties":{"id":"20240310165919-desquxy","updated":"20240310165919"},"Children":[{"Type":"NodeText","Data":"虽然没有一个简洁的机制实现"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"变长参数模板值"},{"Type":"NodeText","Data":"的迭代，但配合 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"..."},{"Type":"NodeText","Data":"​ 会进行展开，如"}]},{"ID":"20240310165919-2y88up7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310165919-2y88up7","updated":"20240310165919"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"template\u003ctypename... BASES\u003e\nclass AClass: public BASES... {}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240310165919-q7zg8mp","Type":"NodeParagraph","Properties":{"id":"20240310165919-q7zg8mp","updated":"20240310165919"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"BASES"},{"Type":"NodeText","Data":"​ 中所有类型会直接展开成 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AClass"},{"Type":"NodeText","Data":"​ 的基类。"}]},{"ID":"20240310165919-abhag80","Type":"NodeParagraph","Properties":{"id":"20240310165919-abhag80","updated":"20240310165919"},"Children":[{"Type":"NodeText","Data":"变长参数可通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"sizeof...(args)"},{"Type":"NodeText","Data":"​ 取得其长度，计算结果为编译期常量。"}]}]}