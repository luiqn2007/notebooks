{"ID":"20240311120827-1gf51f5","Spec":"1","Type":"NodeDocument","Properties":{"icon":"2620-fe0f","id":"20240311120827-1gf51f5","tags":"C++20","title":"独立的 delete 调用","updated":"20240311120920"},"Children":[{"ID":"20240311120846-cmpiv5g","Type":"NodeParagraph","Properties":{"id":"20240311120846-cmpiv5g","updated":"20240311120920"},"Children":[{"Type":"NodeText","Data":"C++20 之前，使用 "},{"Type":"NodeTextMark","TextMarkType":"code block-ref","TextMarkBlockRefID":"20240310144356-d4msctj","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"delete"},{"Type":"NodeText","Data":"​ 删除对象时，编译器总是先调用对象"},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240310161939-6od9da1","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"析构函数"},{"Type":"NodeText","Data":"，之后再调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"delete"},{"Type":"NodeText","Data":"​ 运算符删除内存"}]},{"ID":"20240311120846-i8mvqhu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311120846-i8mvqhu","updated":"20240311120846"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"struct X {\n    ~X() {\n        cout \u003c\u003c \"dtor X\\n\";\n    }\n\n    void operator delete(void* ptr) {\n        cout \u003c\u003c \"delete X\\n\";\n        ::operator delete(ptr);\n    }\n};\n\nint main() {\n    X *x = new X;\n    // dtor X\n    // delete X\n    delete x;\n    return 0;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311120846-4gy1r3l","Type":"NodeParagraph","Properties":{"id":"20240311120846-4gy1r3l","updated":"20240311120846"},"Children":[{"Type":"NodeText","Data":"C++20 后，允许通过自定义运算符时添加 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"std::destorying_delete_t"},{"Type":"NodeText","Data":"​ 参数，禁止在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"delete"},{"Type":"NodeText","Data":"​ 运算符前调用析构函数。此时应该手动在合适的位置调用析构函数。"}]},{"ID":"20240311120846-p7ekplw","Type":"NodeParagraph","Properties":{"id":"20240311120846-p7ekplw","updated":"20240311120846"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"em code","TextMarkTextContent":"std::destorying_delete_t"},{"Type":"NodeText","Data":"​ "},{"Type":"NodeTextMark","TextMarkType":"em","TextMarkTextContent":"参数本身没有用途，只是向编译器发出通知。"}]},{"ID":"20240311120846-sh7ijqx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311120846-sh7ijqx","updated":"20240311120846"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"struct X {\n    ~X() {\n        cout \u003c\u003c \"dtor X\\n\";\n    }\n\n    void* operator new(size_t s) {\n        return ::operator new(s);\n    }\n\n    // 这里添加 std::destroying_delete_t 参数 ↓↓↓\n    void operator delete(X* ptr, std::destroying_delete_t) {\n        cout \u003c\u003c \"delete X\\n\";\n        ptr-\u003e~X(); // ← 手动调用析构函数\n        ::operator delete(ptr);\n    }\n};\n\nint main() {\n    X *x = new X;\n    // delete X\n    // dtor X\n    delete x;\n    return 0;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}