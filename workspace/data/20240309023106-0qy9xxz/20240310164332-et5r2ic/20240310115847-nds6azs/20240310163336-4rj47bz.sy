{"ID":"20240310163336-4rj47bz","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240310163336-4rj47bz","title":"日期与时区","updated":"20240311003905"},"Children":[{"ID":"20240311003850-36xynp2","Type":"NodeParagraph","Properties":{"id":"20240311003850-36xynp2","updated":"20240311003905"},"Children":[{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240310115813-hilngq1","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"STL"},{"Type":"NodeText","Data":" 时间与日期类"}]},{"ID":"20240310163343-l89ktzt","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240310163343-l89ktzt","updated":"20240310163343"},"Children":[{"Type":"NodeText","Data":"Calendar"}]},{"ID":"20240310163343-7hfnvlj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310163343-7hfnvlj","updated":"20240310163344"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"// creating a year\nauto y1 = year{ 2021 };\nauto y2 = 2021y;\n\n// creating a mouth\nauto m1 = month{ 9 };\nauto m2 = September;\n\n// creating a day\nauto d1 = day{ 24 };\nauto d2 = 24d;\n\nweeks w{ 1 }; // 1 周\ndays d{ w };  // 将 1 周转换成天数\nstd::cout \u003c\u003c d.count();\n\nhours h{ d };  // 将 1 周转换成小时\nstd::cout \u003c\u003c h.count();\n\nminutes m{ w }; // 将 1 周转换成分钟\nstd::cout \u003c\u003c m.count();\n\nstruct DaysAttr {\n    sys_days sd;\n    sys_days firstDayOfYear;\n    sys_days lastDayOfYear;\n    year y;\n    month m;\n    day d;\n    weekday wd;\n};\n\nDaysAttr GetCurrentDaysAttr() {\n    // 目的获取今年的第一天和最后一天，统一初始化\n    DaysAttr attr;\n    attr.sd = floor\u003cdays\u003e(system_clock::now());\n    year_month_day ymd = attr.sd;\n    attr.y = ymd.year();\n    attr.m = ymd.month();\n    attr.d = ymd.day();\n    attr.wd = attr.sd;\n    attr.firstDayOfYear = attr.y / 1 / 1;\n    attr.lastDayOfYear = attr.y / 12 / 31;\n\n    return attr;\n}\n\n// 一年中过去的天数，以及一年中剩余的天数\nvoid OverDaysOfYear() {\n    // 这会打印出一年中的天数，其中1月1日为第1天，然后还会打印出该年中剩余的天数（不包括）sd。执行此操作的计算量很小。\n    // 将每个结果除以days{1}一种方法可以提取整整类型中的天数dn并将其dl分成整数，以进行格式化。\n\n    auto arrt = GetCurrentDaysAttr();\n    auto dn = arrt.sd - arrt.firstDayOfYear + days{ 1 };\n    auto dl = arrt.lastDayOfYear - arrt.sd;\n    std::cout \u003c\u003c \"It is day number \" \u003c\u003c dn / days{ 1 } \u003c\u003c \" of the year, \"\n        \u003c\u003c dl / days{ 1 } \u003c\u003c \" days left.\" \u003c\u003c std::endl;\n}\n\n// 该工作日数和一年中的工作日总数\nvoid WorkDaysOfYear() {\n    // wd是|attr.wd = attr.sd|计算的星期几（星期一至星期日）。\n    // 要执行这个计算，我们首先需要的第一个和最后一个日期wd的当年y。|arrt.y / 1 / arrt.wd[1]|是wd一月的第一个，|arrt.y / 12 / arrt.wd[last]|则是wd十二月的最后一个。\n    // wd一年中的总数仅是这两个日期之间的周数（加1）。子表达式[lastWd - firstWd]是两个日期之间的天数。将该结果除以1周将得到一个整数类型，该整数类型保存两个日期之间的周数。\n    // 星期数的计算方法与星期总数的计算方法相同，不同的是星期数从当天开始而不是wd一年的最后一天开始|sd - firstWd|。\n\n    auto arrt = GetCurrentDaysAttr();\n    sys_days firstWd = arrt.y / 1 / arrt.wd[1];\n    sys_days lastWd = arrt.y / 12 / arrt.wd[last];\n    auto totalWd = (lastWd - firstWd) / weeks{ 1 } + 1;\n    auto n_wd = (arrt.sd - firstWd) / weeks{ 1 } + 1;\n    std::cout \u003c\u003c format(\"It is {:%A} number \", arrt.wd) \u003c\u003c n_wd \u003c\u003c \" out of \"\n        \u003c\u003c totalWd \u003c\u003c format(\" in {:%Y}.}\", arrt.y) \u003c\u003c std::endl;;\n}\n\n// 该工作日数和一个月中的工作日总数\nvoid WorkDaysAndMonthOfYear() {\n    // 从wd年月对的第一个和最后一个开始|arrt.y / arrt.m|,而不是整个全年开始\n\n    auto arrt = GetCurrentDaysAttr();\n    sys_days firstWd = arrt.y / arrt.m / arrt.wd[1];\n    sys_days lastWd = arrt.y / arrt.m / arrt.wd[last];\n    auto totalWd = (lastWd - firstWd) / weeks{ 1 } + 1;\n    auto numWd = (arrt.sd - firstWd) / weeks{ 1 } + 1;\n    std::cout \u003c\u003c format(\"It is {:%A} number }\", arrt.wd) \u003c\u003c numWd \u003c\u003c \" out of \"\n        \u003c\u003c totalWd \u003c\u003c format(\" in {:%B %Y}.\", arrt.y / arrt.m) \u003c\u003c std::endl;;\n}\n\n// 一年中的天数\nvoid DaysOfYear() {\n    auto arrt = GetCurrentDaysAttr();\n    auto total_days = arrt.lastDayOfYear - arrt.firstDayOfYear + days{ 1 };\n    std::cout \u003c\u003c format(\"Year {:%Y} has \", y) \u003c\u003c total_days / days{ 1 } \u003c\u003c \" days.\" \u003c\u003c std::endl;;\n}\n\n// 一个月中的天数\nvoid DaysOfMonth() {\n    // 表达式|arrt.y / arrt.m / last|是年份-月份对的最后一天,|arrt.y / arrt.m|就是|arrt.y / arrt.m / 1|月份的第一天。\n    // 两者都转换为sys_days，因此可以减去它们以得到它们之间的天数。从1开始的计数加1。\n\n    auto arrt = GetCurrentDaysAttr();\n    auto totalDay = sys_days{ arrt.y / arrt.m / last } - sys_days{ arrt.y / arrt.m / 1 } + days{ 1 };\n    std::cout \u003c\u003c format(\"{:%B %Y} has \", arrt.y / arrt.m) \u003c\u003c totalDay / days{ 1 } \u003c\u003c \" days.\" \u003c\u003c std::endl;;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240310163343-677gshs","Type":"NodeParagraph","Properties":{"id":"20240310163343-677gshs","updated":"20240310163344"},"Children":[{"Type":"NodeText","Data":"构造初始化为"}]},{"ID":"20240310163343-lu6azuj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310163343-lu6azuj","updated":"20240310163344"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"// 例如：\nsys_days newYear = y/1/1;\nsys_days firstWd = y/1/wd[1];\nsys_days lastWd = y/12/wd[last];\n\n// 可以替换为：\nsys_days newYear = year_month_day{y, month{1}, day{1}};\nsys_days firstWd = year_month_weekday{y, month{1}, weekday_indexed{wd, 1}};\nsys_days lastWd = year_month_weekday_last{y, month{12}, weekday_last{wd}};\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240310163343-6cezuq1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240310163343-6cezuq1","updated":"20240310163343"},"Children":[{"Type":"NodeText","Data":"Timezone"}]},{"ID":"20240310163343-bqemvf5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310163343-bqemvf5","updated":"20240310163344"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"int main()\n{\n    constexpr std::string_view locations[] = {\n        \"Africa/Casablanca\",   \"America/Argentina/Buenos_Aires\",\n        \"America/Barbados\",    \"America/Indiana/Petersburg\",\n        \"America/Tarasco_Bar\", \"Antarctica/Casey\",\n        \"Antarctica/Vostok\",   \"Asia/Magadan\",\n        \"Asia/Manila\",         \"Asia/Shanghai\",\n        \"Asia/Tokyo\",          \"Atlantic/Bermuda\",\n        \"Australia/Darwin\",    \"Europe/Isle_of_Man\",\n        \"Europe/Laputa\",       \"Indian/Christmas\",\n        \"Indian/Cocos\",        \"Pacific/Galapagos\",\n    };\n    constexpr auto width = std::ranges::max_element(locations, {},\n        [](const auto\u0026 s) { return s.length(); })-\u003elength();\n \n    for (const auto location : locations) {\n        try {\n            // may throw if `location` is not in the time zone database\n            const std::chrono::zoned_time zt{location, std::chrono::system_clock::now()};\n            std::cout \u003c\u003c std::setw(width) \u003c\u003c location \u003c\u003c \" - Zoned Time: \" \u003c\u003c zt \u003c\u003c '\\n';\n        } catch (std::chrono::nonexistent_local_time\u0026 ex) {\n            std::cout \u003c\u003c \"Error: \" \u003c\u003c ex.what() \u003c\u003c '\\n';\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}