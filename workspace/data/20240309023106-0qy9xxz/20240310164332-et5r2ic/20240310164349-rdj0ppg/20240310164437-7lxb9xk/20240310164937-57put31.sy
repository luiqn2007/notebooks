{"ID":"20240310164937-57put31","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240310164937-57put31","title":"future","updated":"20240310164955"},"Children":[{"ID":"20240310164950-baangry","Type":"NodeParagraph","Properties":{"id":"20240310164950-baangry","updated":"20240310164950"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"std::future"},{"Type":"NodeText","Data":"​ 该类用于解决异步问题，作为异步结果的传递通道。"}]},{"ID":"20240310164950-8be54x7","Type":"NodeList","ListData":{},"Properties":{"id":"20240310164950-8be54x7","updated":"20240310164955"},"Children":[{"ID":"20240310164950-em29aj1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240310164950-em29aj1","updated":"20240310164950"},"Children":[{"ID":"20240310164950-v8zz7u3","Type":"NodeParagraph","Properties":{"id":"20240310164950-v8zz7u3","updated":"20240310164950"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"std::future"},{"Type":"NodeText","Data":"​：不可复制的异步结果"}]}]},{"ID":"20240310164950-9nvpc9j","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240310164950-9nvpc9j","updated":"20240310164950"},"Children":[{"ID":"20240310164950-91r927i","Type":"NodeParagraph","Properties":{"id":"20240310164950-91r927i","updated":"20240310164950"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"std::shared_future"},{"Type":"NodeText","Data":"​：可复制的异步结果，可存于容器中"}]}]},{"ID":"20240310164950-cdtwd43","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240310164950-cdtwd43","updated":"20240310164955"},"Children":[{"ID":"20240310164950-17gea2e","Type":"NodeParagraph","Properties":{"id":"20240310164950-17gea2e","updated":"20240310164955"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"std::paclaged_task"},{"Type":"NodeText","Data":"​：包装一个调用对象，绑定函数和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"future"},{"Type":"NodeText","Data":"​"}]}]}]},{"ID":"20240310164950-4f5761n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310164950-4f5761n","updated":"20240310164950"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"#include \u003ciostream\u003e\n#include \u003cthread\u003e\n#include \u003cfuture\u003e\n\nusing namespace std;\n\nint main() {\n    packaged_task\u003cint(int)\u003e task ([] (int value) {return value * 2;});\n    future\u003cint\u003e f = task.get_future();\n\n    thread(std::move(task), 10).detach();\n    // Result is 20\n    cout \u003c\u003c \"Result is \" \u003c\u003c f.get() \u003c\u003c endl;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240310164950-y63bqkq","Type":"NodeList","ListData":{},"Properties":{"id":"20240310164950-y63bqkq","updated":"20240310164950"},"Children":[{"ID":"20240310164950-1mmd660","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240310164950-1mmd660","updated":"20240310164950"},"Children":[{"ID":"20240310164950-wm2llo5","Type":"NodeParagraph","Properties":{"id":"20240310164950-wm2llo5","updated":"20240310164950"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"std::promise"},{"Type":"NodeText","Data":"​：包装一个值，绑定值和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"future"},{"Type":"NodeText","Data":"​"}]}]}]},{"ID":"20240310164950-ny2ulkm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310164950-ny2ulkm","updated":"20240310164950"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"#include \u003ciostream\u003e\n#include \u003cthread\u003e\n#include \u003cfuture\u003e\n\nusing namespace std;\n\nint main() {\n\n    promise\u003cint\u003e p;\n    future\u003cint\u003e f = p.get_future();\n\n    thread t_show_value([\u0026] () {\n        cout \u003c\u003c \"Waiting for value...\" \u003c\u003c endl;\n        cout \u003c\u003c \"Future value is \" \u003c\u003c f.get() \u003c\u003c endl;\n    });\n\n    thread t_get_value([\u0026] () {\n        cout \u003c\u003c \"Getting value...\" \u003c\u003c endl;\n        this_thread::sleep_for(chrono::seconds(5));\n        cout \u003c\u003c \"Value updated.\" \u003c\u003c endl;\n        p.set_value(10);\n    });\n\n    t_show_value.join();\n    t_get_value.join();\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240310164950-cst2ipo","Type":"NodeParagraph","Properties":{"id":"20240310164950-cst2ipo","updated":"20240310164950"}}]}