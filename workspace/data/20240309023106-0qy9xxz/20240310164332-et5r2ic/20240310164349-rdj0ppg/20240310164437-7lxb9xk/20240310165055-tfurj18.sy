{"ID":"20240310165055-tfurj18","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240310165055-tfurj18","title":"自动合流","updated":"20240310165101"},"Children":[{"ID":"20240310165101-ogytcx3","Type":"NodeParagraph","Properties":{"id":"20240310165101-ogytcx3","updated":"20240310165101"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"std::jthread"},{"Type":"NodeText","Data":"​ 提供 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"std:thread"},{"Type":"NodeText","Data":"​ 的一个变种"}]},{"ID":"20240310165101-d286njm","Type":"NodeList","ListData":{},"Properties":{"id":"20240310165101-d286njm","updated":"20240310165101"},"Children":[{"ID":"20240310165101-hd3b0n5","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240310165101-hd3b0n5","updated":"20240310165101"},"Children":[{"ID":"20240310165101-f1ix38l","Type":"NodeParagraph","Properties":{"id":"20240310165101-f1ix38l","updated":"20240310165101"},"Children":[{"Type":"NodeText","Data":"析构函数调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"stop_source.request_stop()"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20240310165101-rf9z59d","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240310165101-rf9z59d","updated":"20240310165101"},"Children":[{"ID":"20240310165101-mowa29x","Type":"NodeParagraph","Properties":{"id":"20240310165101-mowa29x","updated":"20240310165101"},"Children":[{"Type":"NodeText","Data":"析构函数自动调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"join()"},{"Type":"NodeText","Data":"​"}]}]}]},{"ID":"20240310165101-gk7megn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240310165101-gk7megn","updated":"20240310165101"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"void Test() {\n    std::jthread th;\n    {\n        th = std::jthread([]() {\n            for (unsigned i = 1; i \u003c 10; ++i) {\n                std::cout \u003c\u003c i \u003c\u003c \" \";\n                Sleep(500);\n            }\n        });\n    }\n    // 没有使用join也不会崩溃,因为std::jthread的析构函数默认调用join()\n}\n\nint main(int argc, char* argv[]) {\n    Test();\n    return 0;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}